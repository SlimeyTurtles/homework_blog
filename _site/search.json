[
  {
    "objectID": "posts/CSC220_8-30-23/index.html",
    "href": "posts/CSC220_8-30-23/index.html",
    "title": "CSC 220: Day 4 (Week 2)",
    "section": "",
    "text": "package one;\n\npublic class A {\n\n  int a;\n  public int b;\n  private int c;\n  static public int d;\n  static private in e;\n  \n  public void f1()  {}\n  private void f2()  {}\n  void f3() {}\n  static public f4() {}\n  void f5() {\n  \n    // Q1: List all methods and data that can be accessed\n    // Everything\n  \n  }\n  static void f6() {\n  \n    // Q2: List all fields and data that can be accessed\n    // Everything with static\n  \n  }\n}\npackage one;\n\nClass B {\n\n  void g() {\n    A objA = new A();\n    \n    // Q3: List all fields and data that can be accessed\n    // Everything with the default modifier or public\n    // Everything without private\n  }\n\n}\nPackage two;\nImport one;\n\nClass C {\n\n  void h() {\n  \n    // Q4: List all fields and data that can be accessed\n    // Everything with public only\n    \n  }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\nCol1\nSame Class\nSame Package\nInherited\nDifferent Package\n\n\n\n\nPublic\n🟩\n🟩\n🟩\n🟩\n\n\nProtected\n🟩\n🟩\n🟩\n🟥\n\n\nDefault\n🟩\n🟩\n🟥\n🟥\n\n\nPrivate\n🟩\n🟥\n🟥\n🟥\n\n\nPackage\nSame Package\nSame Package\nDifferent Package\nDifferent Package\n\n\n\n\n\n\n\n\nUse a single capital letter\nPlaceholder instead of an actual class type\n\npublic class MyClass &lt;T&gt;\npublic class MyClass &lt;T, Q&gt;\n\n\nOrderedPairIntro to Generic Data Types: simple example\n// define generic type T\n// within the class, can use T as fields,\n// parameters, local vars and return type\n\npublic class OrderedPair &lt;T&gt;\n{\n  \n  private T first, second; // fields\n  \n  public OrderedPair () {} // end default constructor\n  \n  public void setPair (T firstItem, T secondItem) {\n    first = firstItem;\n    second = secondItem;\n  } // end setPair\n  \n  public void changeOrder () {\n    T temp = first;\n    first = second;\n    second = temp;\n  } // end changeOrder\n  \n  public String toString () {\n    return \"(\" + first + \", \" + second + \")\";\n  } // end toString\n} // end OrderedPair\n\n\n\nOrderedPair &lt;String&gt; fruit = new OrderedPair &lt;String&gt;\n\nName twee = new Name(\"Avinh\", \"Huynh\");\nName twaa = new Name(\"Laeli\", \"Gordon\");\nOrderedPair &lt;Name&gt; switchNames = new OrderedPair &lt;Name&gt;\n\nOrderedPair &lt;int&gt; myObj = new OrderedPair &lt;int&gt; // DOESNT WORK. NO PRIMITIVES\nOrderedPair &lt;Integer&gt; myObj = new OrderedPair &lt;Integer&gt; // User wrappers\n\n\n\n\n\nComposition: Has A instantiated\nInheritance: Is A\n\n\n\npublic class Student {\n\n  private Name name;\n  \n  public Student() {\n    name = new Name();\n  }\n\n}\n\nStudent composes Name inside of it\n\n\n\n\nFirst a general class (base class / super class / parent class) is defined. Then, a derived class (subclass / child class) can:\n\nAdd methods and data fields\nRevise methods and rewrite them\n\nAdvantages:\n\nSaves work\nCommon properties are only defined once\n\nNotes:\n\nFinal classes can’t be parents (String, Integer)\n\n\n\n\n\n\nA CollegeStudent is always a Student, but not always the other way around\nA UndergradStudent is always a CollegeStudent and always a Student, but not the other way around\nA SchoolStudent and CollegeStudent are siblings, but they are not related\n\n\n\n\n\n\nA CollegeStudent contains the Student object\n\n\n\n\npublic class CollegeStudent extends Student {\n\n  // add fields\n  private int year;\n  private String degree;\n  \n  public CollegeStudent () {\n  \n    super(); // calls the Student constructor\n    year = 0;\n    degree = \"\";\n  \n  }\n  \n  public String toString() {\n  \n    return super.ToString() + \", \" + degree + \", \" + year;\n  \n  }\n}\n\nsuper has to be the first function in the constructor\ncan not use Student()\nthis() is the constructor for the child class\n\n\n\n\n\n\nVisual shows how protection works for subclasses"
  },
  {
    "objectID": "posts/CSC220_8-30-23/index.html#protection-levels",
    "href": "posts/CSC220_8-30-23/index.html#protection-levels",
    "title": "CSC 220: Day 4 (Week 2)",
    "section": "",
    "text": "package one;\n\npublic class A {\n\n  int a;\n  public int b;\n  private int c;\n  static public int d;\n  static private in e;\n  \n  public void f1()  {}\n  private void f2()  {}\n  void f3() {}\n  static public f4() {}\n  void f5() {\n  \n    // Q1: List all methods and data that can be accessed\n    // Everything\n  \n  }\n  static void f6() {\n  \n    // Q2: List all fields and data that can be accessed\n    // Everything with static\n  \n  }\n}\npackage one;\n\nClass B {\n\n  void g() {\n    A objA = new A();\n    \n    // Q3: List all fields and data that can be accessed\n    // Everything with the default modifier or public\n    // Everything without private\n  }\n\n}\nPackage two;\nImport one;\n\nClass C {\n\n  void h() {\n  \n    // Q4: List all fields and data that can be accessed\n    // Everything with public only\n    \n  }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\nCol1\nSame Class\nSame Package\nInherited\nDifferent Package\n\n\n\n\nPublic\n🟩\n🟩\n🟩\n🟩\n\n\nProtected\n🟩\n🟩\n🟩\n🟥\n\n\nDefault\n🟩\n🟩\n🟥\n🟥\n\n\nPrivate\n🟩\n🟥\n🟥\n🟥\n\n\nPackage\nSame Package\nSame Package\nDifferent Package\nDifferent Package"
  },
  {
    "objectID": "posts/CSC220_8-30-23/index.html#generic-data-types",
    "href": "posts/CSC220_8-30-23/index.html#generic-data-types",
    "title": "CSC 220: Day 4 (Week 2)",
    "section": "",
    "text": "Use a single capital letter\nPlaceholder instead of an actual class type\n\npublic class MyClass &lt;T&gt;\npublic class MyClass &lt;T, Q&gt;\n\n\nOrderedPairIntro to Generic Data Types: simple example\n// define generic type T\n// within the class, can use T as fields,\n// parameters, local vars and return type\n\npublic class OrderedPair &lt;T&gt;\n{\n  \n  private T first, second; // fields\n  \n  public OrderedPair () {} // end default constructor\n  \n  public void setPair (T firstItem, T secondItem) {\n    first = firstItem;\n    second = secondItem;\n  } // end setPair\n  \n  public void changeOrder () {\n    T temp = first;\n    first = second;\n    second = temp;\n  } // end changeOrder\n  \n  public String toString () {\n    return \"(\" + first + \", \" + second + \")\";\n  } // end toString\n} // end OrderedPair\n\n\n\nOrderedPair &lt;String&gt; fruit = new OrderedPair &lt;String&gt;\n\nName twee = new Name(\"Avinh\", \"Huynh\");\nName twaa = new Name(\"Laeli\", \"Gordon\");\nOrderedPair &lt;Name&gt; switchNames = new OrderedPair &lt;Name&gt;\n\nOrderedPair &lt;int&gt; myObj = new OrderedPair &lt;int&gt; // DOESNT WORK. NO PRIMITIVES\nOrderedPair &lt;Integer&gt; myObj = new OrderedPair &lt;Integer&gt; // User wrappers"
  },
  {
    "objectID": "posts/CSC220_8-30-23/index.html#composition-and-inheritance",
    "href": "posts/CSC220_8-30-23/index.html#composition-and-inheritance",
    "title": "CSC 220: Day 4 (Week 2)",
    "section": "",
    "text": "Composition: Has A instantiated\nInheritance: Is A\n\n\n\npublic class Student {\n\n  private Name name;\n  \n  public Student() {\n    name = new Name();\n  }\n\n}\n\nStudent composes Name inside of it\n\n\n\n\nFirst a general class (base class / super class / parent class) is defined. Then, a derived class (subclass / child class) can:\n\nAdd methods and data fields\nRevise methods and rewrite them\n\nAdvantages:\n\nSaves work\nCommon properties are only defined once\n\nNotes:\n\nFinal classes can’t be parents (String, Integer)\n\n\n\n\n\n\nA CollegeStudent is always a Student, but not always the other way around\nA UndergradStudent is always a CollegeStudent and always a Student, but not the other way around\nA SchoolStudent and CollegeStudent are siblings, but they are not related\n\n\n\n\n\n\nA CollegeStudent contains the Student object\n\n\n\n\npublic class CollegeStudent extends Student {\n\n  // add fields\n  private int year;\n  private String degree;\n  \n  public CollegeStudent () {\n  \n    super(); // calls the Student constructor\n    year = 0;\n    degree = \"\";\n  \n  }\n  \n  public String toString() {\n  \n    return super.ToString() + \", \" + degree + \", \" + year;\n  \n  }\n}\n\nsuper has to be the first function in the constructor\ncan not use Student()\nthis() is the constructor for the child class\n\n\n\n\n\n\nVisual shows how protection works for subclasses"
  },
  {
    "objectID": "posts/ENG104_8-29-23/index.html",
    "href": "posts/ENG104_8-29-23/index.html",
    "title": "ENG 104: Day 3 (Week 2)",
    "section": "",
    "text": "We took a poll going over how COVID affected each student and the results were:\n\nWere expected to do 5 hours on average per week on ENG104 but its very silly because of it’s vaugeness\nWe got assigned homework\nWe talked in breakout rooms about how covid affected our lives"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "homework_blog",
    "section": "",
    "text": "ENG 104: Pre-reading worksheet\n\n\n\n\n\n\n\nENG104\n\n\nHW\n\n\n\n\n\n\n\n\n\n\n\nSep 5, 2023\n\n\nAvinh Huynh\n\n\n\n\n\n\n  \n\n\n\n\nCSC 220: Day 4 (Week 2)\n\n\n\n\n\n\n\nCSC220\n\n\n\n\n\n\n\n\n\n\n\nAug 30, 2023\n\n\nAvinh Huynh\n\n\n\n\n\n\n  \n\n\n\n\nENG 104: Day 3 (Week 2)\n\n\n\n\n\n\n\nENG104\n\n\nCW\n\n\n\n\n\n\n\n\n\n\n\nAug 29, 2023\n\n\nAvinh Huynh\n\n\n\n\n\n\n  \n\n\n\n\nCSC 230: Day 2\n\n\n\n\n\n\n\nCSC230\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2023\n\n\nAvinh Huynh\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/ENG104_hw_9-4-23/index.html",
    "href": "posts/ENG104_hw_9-4-23/index.html",
    "title": "ENG 104: Pre-reading worksheet",
    "section": "",
    "text": "Link to assignment\n\n\nHomework\n\nPlease send me an email with proof of purchase of the required textbook, “A Pocket Style Manual (9th Edition)”.\nComplete a Pre-Reading Worksheet for each of the two articles.\nRead and annotate the two articles (located in Class Resources).\nWrite down one new thing you can add to your daily routine that will add positive, or peaceful energy to your mind.\nDescribe how and why you think adding this one thing will create positive energy for you.\nIf you are already incorporating positive things into your everyday routine to add positive energy, please describe these and describe the effect these activities have on the way you feel.\n\n\n\nNotes\n\nPlease make sure you complete this homework before the start of our next Zoom class, as we will be using the results in our Zoom class on September 5.\nI am not collecting this homework. The only thing you are submitting to me (by email) is your textbook proof of purchase. You are not submitting anything to Canvas this week."
  },
  {
    "objectID": "posts/CSC230_8-28-23/index.html",
    "href": "posts/CSC230_8-28-23/index.html",
    "title": "CSC 230: Day 2",
    "section": "",
    "text": "Set theory\n\nReview\n\n\n\n\n\n\n\n\nSymbol\nDefinition\nExample\n\n\n\n\n:\nsuch that\nA = {x: 0 &lt; x &lt; 10}\n\n\n|\nsuch that\nA = {x | 0 &lt; x &lt; 10}\n\n\n∈\nelement of\nA = {1, 2, 3}\nB = {2, 3}\nB ∈ A\n\n\n\n\n\nSubsets and Proper Subsets\nDefinitions\n\n\n\n\n\n\n\n\nTerm\nDefinition\nExample\n\n\n\n\nsubset ⊆\nAll of the elements of one set is contained in or is equal to another set\nA = {1, 2, 3}, B = {2, 3}, C = {1, 2, 3}\nB ⊆ A, C ⊆ A\n\n\nproper subset ⊂\nAll of the elements of one set is container in another set that are not equal\nA = {1, 2, 3}, B = {2, 3}, C = {1, 2, 3}\nonly B ⊂ A\n\n\nnot a subset of ⊄\nNot all elements are contained in another set\nA = {1, 2, 3}, B = {2, 3}, C = {1, 2, 3}\nA ⊄ B\n\n\n\n\n\nPower set\nDefinitions\n\n\n\n\n\n\n\n\nPower Set\nDefinition\nExample\n\n\n\n\nP()\ncontains all subsets of\nA = {1, 2}\nP(A) = {∅, {1}, {2}, {1, 2}}\n\n\n\nCardinality\nA = {1, 2, 3}\nP(A) = {∅, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}\n|P(A)| = 2|A| = 23 = 8\nDiagram\nA = {X, Y, Z}\nP(A) = {∅, {X}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n\nX\n🟥\n🟩\n🟥\n🟥\n🟩\n🟩\n🟥\n🟩\n\n\nY\n🟥\n🟥\n🟩\n🟥\n🟩\n🟥\n🟩\n🟩\n\n\nZ\n🟥\n🟥\n🟥\n🟩\n🟥\n🟩\n🟩\n🟩\n\n\nSet\n∅\n{X}\n{Y}\n{Z}\n{X, Y}\n{X, Z}\n{Y, Z}\n{X, Y, Z}\n\n\n\n\n\n\nLogic\nDefinitions\n\n\n\n\n\n\n\n\nTerm\nDefinition\nExample\n\n\n\n\nUnion ∪\nA ∪ B = {x | x ∈ A or x ∈ B}\nElements that are in either set A or set B\nA = {1, 2, 3}, B = {3, 4, 5}\nA ∪ B = {1, 2, 3, 4, 5}\n\n\nIntersection ∩\nA ∩ B = {x | x ∈ A or x ∈ B}\nElements that are in both set A and set B\nA = {1, 2, 3}, B = {3, 4, 5}\nA ∩ B = {3}\n\n\nDifference -\nA - B = {x | x ∈ A or x ∉ B}\nElements of A that are not in B\nA = {1, 2, 3}, B = {3, 4, 5}\nA - B = {1, 2}\n\n\nCompliment ’\nA’ = Ā = {x | x ∈ U and x ∉ A}\nAll elements that are not in A\nA = {1, 2, 3}\nA’ = {4, 5, 6, 7…}\n\n\nSymmetric Difference ⊕\nA ⊕ B = (A - B) ∪ (B - A)\nAll elements of A or B, excluding the elements that are in both A and B\nA = {1, 2, 3}, B = {3, 4, 5}\nA ⊕ B = {1, 2, 4, 5}\n\n\n\n\n* if there are no intersection for Symmetric Difference, then it is known as disjointed\nDiagrams\n\nNested Element of Diagram\nC ∈ B and B ∈ A ⟹ C ∈ A\n\n\n\n\nProofs\nDefinitions\n\n\n\n\n\n\n\n\nTerms\nDefinitions\nExamples\n\n\n\n\nIf and only if, iff ⟺\nOne thing is true only if the second condition is satisfied, and this goes both ways\nA = B ⟺ A ⊆ B and B ⊆ A\n\n\nif…, then… ⟹\nIf one thing is true, then the other is true\nA ⟹ B\n\n\nor ∨\nif one thing is true, or the other thing is true, it will evaluate to true\nA ∨ B\n\n\n\nA\nB\nOutput\n\n\n\n\nF\nF\nF\n\n\nT\nF\nT\n\n\nF\nT\nT\n\n\nT\nT\nT\n\n\n\n\n\nand ∧\nOnly if both are true then it will evaluate to true\n\n\n\nA\nB\nOutput\n\n\n\n\nF\nF\nF\n\n\nT\nF\nF\n\n\nF\nT\nF\n\n\nT\nT\nT\n\n\n\n\n\n\nAxioms (Preknown Truths)\n\nA = B ⟺ A ⊆ B and B ⊆ A\nA ⊆ B ∧ B ⊆ C ⟹ A ⊆ C\n∅ ⊆ A for any A, but not ∅ ∈ A"
  }
]